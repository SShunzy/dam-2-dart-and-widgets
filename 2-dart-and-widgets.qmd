---
subtitle: Dart and Widget Basics
date: 2024-10-02
title-logo: figs/flutter-logo.svg
toc: false
---

# Dart

## Dart is still evolving

**2010** — Designed by Lars Bak et Kasper Lund

**2011** — Version 1.0

**2014** — ECMA standard

**2017** — Flutter

**2018** — Version 2.0 (null safety)

**2023** — Version 3.0 (records, pattern matching)

## Pure Dart

Quick snippets online on [Dart Pad][dartpad].

[dartpad]: https://dartpad.dev/

In IntelliJ:

- Choose Dart instead of Flutter
- Dart SDK is in  
  `/path/to/flutter/bin/cache/dart-sdk`

## Dart Tutorial

<https://dart.dev/language>

- Language, from *Introduction* to *Null safety*  
  (you can skip *Patterns* in a first read)
- In Core libraries, skim through `dart:core`,  
  especially the *Collections*.

You can test your knowledge through exercises and quizzes at <https://dart-tutorial.com/> (end of each section)

## Active Learning

> If you want to master something, teach it!  
— Richard P. Feynman

Note any topic new or interesting to you.

Update the slides at  
<https://github.com/cffs/dam-2-dart-and-widgets>  
according to given instructions.

<!-- Add new slides about Dart following this line -->

## Initialize a final field in a constructor

```dart
class MyClass {
  final String _s = "Hello";
  final int _i;

  // MyClass(i) { _i = i; } error, _i is final
  // MyClass(i) : _i = i; OK, and flexible
  MyClass(this._i);
}
```

## Smart conditional branches

```dart
class Parent {}

class Child extends Parent { int i = 42; }

void f(Parent? p) {
  if (p is Child) {
    print(p.i); // No need for cast
  }
}

Parent g(Parent? p) {
  if (p == null) { return Parent(); }
  return p; // Dart knows p is not null here
}
```

# Cascade notation (.. permet de récupérer l'objet renvoyé par la première instruction et d'y appliquer plusieurs opérations)
```
var paint = Paint()
  ..color = Colors.black
  ..strokeCap = StrokeCap.round
  ..strokeWidth = 5.0;
```

# Null test (?.. vérifie que l'objet renvoyé n'est pas null, les opérations suivantes sont annulées dans ce cas)
```
querySelector('#confirm') // Get an object.
  ?..text = 'Confirm' // Use its members.
  ..classes.add('important')
  ..onClick.listen((e) => window.alert('Confirmed!'))
  ..scrollIntoView();
```

# !! La première commande doit renvoyer un objet (ici WritableStream() renvoie null, donc la chaine est cassée)
```
var sb = StringBuffer();
sb.write('foo')
  ..write('bar'); // Error: method 'write' isn't defined for 'void'.
```

<!-- End of Dart feature slides -->

# Flutter Widget Basics

## Demo

A (simplified) Todo list app from scratch

## Layout Exercise

Have a look at common layout widgets:  
`Column`, `Row`, `Stack`, `Container`, `Padding`, and `SizedBox`.

Write an example App that use them all.

- Vary alignment, padding, and margins.
- Keep the code clean!
- Use your IDE refactoring features.

---

[Questions?]{.r-fit-text}
